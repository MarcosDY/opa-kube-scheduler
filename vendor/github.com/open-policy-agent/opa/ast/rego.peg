{
package ast

//
// BUGS: the escaped forward solidus (`\/`) is not currently handled for strings.
//

// currentLocation converts the parser context to a Location object.
func currentLocation(c *current) *Location {
    // TODO(tsandall): is it possible to access the filename from inside the parser?
    return NewLocation(c.text, "", c.pos.line, c.pos.col)
}

}

Program <- _ vals:(head:Stmt tail:(ws Stmt)*)? _ EOF {
    var buf []interface{}

    if vals == nil {
        return buf, nil
    }

    ifaceSlice := vals.([]interface{})
    head := ifaceSlice[0]
    buf = append(buf, head)
    for _, tail := range ifaceSlice[1].([]interface{}) {
        stmt := tail.([]interface{})[1]
        buf = append(buf, stmt)
    }

    return buf, nil
}

Stmt <- val:(Package / Import / Rule / Body / Comment) {
    return val, nil
}

Package <- "package" ws val:(Ref / Var) {
    // All packages are implicitly declared under the default root document.
    path := RefTerm(DefaultRootDocument)
    switch v := val.(*Term).Value.(type) {
    case Ref:
        // Convert head of package Ref to String because it will be prefixed
        // with the root document variable.
        head := v[0]
        head = StringTerm(string(head.Value.(Var)))
        head.Location = v[0].Location
        tail := v[1:]
        if !tail.IsGround() {
            return nil, fmt.Errorf("package name cannot contain variables: %v", v)
        }

        // We do not allow non-string values in package names.
        // Because documents are typically represented as JSON, non-string keys are
        // not allowed for now.
        // TODO(tsandall): consider special syntax for namespacing under arrays.
        for _, p := range tail {
            _, ok := p.Value.(String)
            if !ok {
                return nil, fmt.Errorf("package name cannot contain non-string values: %v", v)
            }
        }
        path.Value = append(path.Value.(Ref), head)
        path.Value = append(path.Value.(Ref), tail...)
    case Var:
        s := StringTerm(string(v))
        s.Location = val.(*Term).Location
        path.Value = append(path.Value.(Ref), s)
    }
    pkg := &Package{Location: currentLocation(c), Path: path.Value.(Ref)}
    return pkg, nil
}

Import <- "import" ws path:(Ref / Var) alias:(ws "as" ws Var)? {
    imp := &Import{}
    imp.Location = currentLocation(c)
    imp.Path = path.(*Term)
    switch p := imp.Path.Value.(type) {
    case Ref:
        for _, x := range p[1:] {
            if _, ok := x.Value.(String); !ok {
                return nil, fmt.Errorf("import path cannot contain non-string values: %v", x)
            }
        }
    }
    if alias == nil {
        return imp, nil
    }
    aliasSlice := alias.([]interface{})
    // Import definition above describes the "alias" slice. We only care about the "Var" element.
    imp.Alias = aliasSlice[3].(*Term).Value.(Var)
    return imp, nil
}

Rule <- name:Var key:( _ "[" _ Term _ "]" _ )? value:( _ "=" _ Term )? body:( _ ":-" _ Body) {

    rule := &Rule{}
    rule.Location = currentLocation(c)
    rule.Name = name.(*Term).Value.(Var)

    if key != nil {
        keySlice := key.([]interface{})
        // Rule definition above describes the "key" slice. We care about the "Term" element.
        rule.Key = keySlice[3].(*Term)

        var ref Ref
        WalkRefs(rule.Key, func(x Ref) bool {
            ref = x
            return true
        })

        if ref != nil {
            return nil, fmt.Errorf("head cannot contain references (%v appears in key)", ref)
        }

        var closure interface{}
        WalkClosures(rule.Key, func(x interface{}) bool {
            closure = x
            return true
        })

        if closure != nil {
            return nil, fmt.Errorf("head cannot contain closures (%v appears in key)", closure)
        }
    }

    if value != nil {
        valueSlice := value.([]interface{})
        // Rule definition above describes the "value" slice. We care about the "Term" element.
        rule.Value = valueSlice[len(valueSlice)-1].(*Term)

        var ref Ref
        WalkRefs(rule.Value, func(x Ref) bool {
            ref = x
            return true
        })

        if ref != nil {
            return nil, fmt.Errorf("head cannot contain references (%v appears in value)", ref)
        }

        var closure interface{}
        WalkClosures(rule.Value, func(x interface{}) bool {
            closure = x
            return true
        })

        if closure != nil {
            return nil, fmt.Errorf("head cannot contain closures (%v appears in value)", closure)
        }
    }

    if key == nil && value == nil {
        rule.Value = BooleanTerm(true)
    }

    if key != nil && value != nil {
        switch rule.Key.Value.(type) {
        case Var, String: // nop
        default:
            return nil, fmt.Errorf("head of object rule must have string or var key (%s is not allowed)", rule.Key)
        }
    }

    // Rule definition above describes the "body" slice. We only care about the "Body" element.
    rule.Body = body.([]interface{})[3].(Body)

    return rule, nil
}

Body <- head:Expr tail:( _ "," _ Expr)* {
    var buf Body
    buf = append(buf, head.(*Expr))
    for _, s := range tail.([]interface{}) {
        expr := s.([]interface{})[3].(*Expr)
        buf = append(buf, expr)
    }
    return buf, nil
}

Expr <- neg:( "not" ws )? val:(InfixExpr / PrefixExpr / Term) {
    expr := &Expr{}
    expr.Location = currentLocation(c)
    expr.Negated = neg != nil
    expr.Terms = val
    return expr, nil
}

InfixExpr <- left:Term _ op:InfixOp _ right:Term {
    return []*Term{op.(*Term), left.(*Term), right.(*Term)}, nil
}

InfixOp <- val:("=" / "!=" / "<=" / ">=" / "<" / ">") {
    op := string(c.text)
    for _, b := range Builtins {
        if string(b.Infix) == op {
            op = string(b.Name)
        }
    }
    operator := VarTerm(op)
    operator.Location = currentLocation(c)
	return operator, nil
}

PrefixExpr <- op:Var "(" _ head:Term? tail:( _ "," _ Term )* _  ")" {
    buf := []*Term{op.(*Term)}
    if head == nil {
        return buf, nil
    }
    buf = append(buf, head.(*Term))

    // PrefixExpr above describes the "tail" structure. We only care about the "Term" elements.
    tailSlice := tail.([]interface{})
    for _, v := range tailSlice {
        s := v.([]interface{})
        buf = append(buf, s[len(s) - 1].(*Term))
    }
    return buf, nil
}

Term <- val:( Comprehension / Composite / Scalar / Ref / Var ) {
    return val, nil
}

Comprehension <- ArrayComprehension

ArrayComprehension <- "[" _ term:Term _ "|" _ body:Body _ "]" {
    ac := ArrayComprehensionTerm(term.(*Term), body.(Body))
    ac.Location = currentLocation(c)
    return ac, nil
}

Composite <- Object / Array

Scalar <- Number / String / Bool / Null

Key <- Scalar / Ref / Var

Object <- '{' _ head:(Key _ ':' _ Term)? tail:( _ ',' _ Key _ ':' _ Term )* _ '}' {
   obj := ObjectTerm()
   obj.Location = currentLocation(c)

   // Empty object.
   if head == nil {
       return obj, nil
   }

   // Object definition above describes the "head" structure. We only care about the "Key" and "Term" elements.
   headSlice := head.([]interface{})
   obj.Value = append(obj.Value.(Object), Item(headSlice[0].(*Term), headSlice[len(headSlice) - 1].(*Term)))

   // Non-empty object, remaining key/value pairs.
   tailSlice := tail.([]interface{})
   for _, v := range tailSlice {
       s := v.([]interface{})
       // Object definition above describes the "tail" structure. We only care about the "Key" and "Term" elements.
       obj.Value = append(obj.Value.(Object), Item(s[3].(*Term), s[len(s) - 1].(*Term)))
   }

   return obj, nil
}

Array <- '[' _  head:Term? tail:(_ ',' _ Term)* _ ']' {

   arr := ArrayTerm()
   arr.Location = currentLocation(c)

   // Empty array.
   if head == nil {
       return arr, nil
   }

   // Non-empty array, first element.
   arr.Value = append(arr.Value.(Array), head.(*Term))

   // Non-empty array, remaining elements.
   tailSlice := tail.([]interface{})
   for _, v := range tailSlice {
       s := v.([]interface{})
       // Array definition above describes the "tail" structure. We only care about the "Term" elements.
       arr.Value = append(arr.Value.(Array), s[len(s) - 1].(*Term))
   }

   return arr, nil
}

Ref <- head:Var tail:( RefDot / RefBracket )+ {

   ref := RefTerm(head.(*Term))
   ref.Location = currentLocation(c)

   tailSlice := tail.([]interface{})
   for _, v := range tailSlice {
       ref.Value = append(ref.Value.(Ref), v.(*Term))
   }

   return ref, nil
}

RefDot <- "." val:Var {
    // Convert the Var into a string because 'foo.bar.baz' is equivalent to 'foo["bar"]["baz"]'.
    str := StringTerm(string(val.(*Term).Value.(Var)))
    str.Location = currentLocation(c)
    return str, nil
}

RefBracket <- "[" val:(Ref / Scalar / Var) "]" {
    return val, nil
}

Var <- !Reserved AsciiLetter (AsciiLetter / DecimalDigit)* {
    str := string(c.text)
    variable := VarTerm(str)
    variable.Location = currentLocation(c)
    return variable, nil
}

Number <- '-'? Integer ( '.' DecimalDigit+ )? Exponent? {
    // JSON numbers have the same syntax as Go's, and are parseable using
    // strconv.
    v, err := strconv.ParseFloat(string(c.text), 64)
    num := NumberTerm(v)
    num.Location = currentLocation(c)
    return num, err
}

String <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    // TODO : the forward slash (solidus) is not a valid escape in Go, it will
    // fail if there's one in the string
    v, err := strconv.Unquote(string(c.text))
    str := StringTerm(v)
    str.Location = currentLocation(c)
    return str, err
}

Bool <- "true" {
    bol := BooleanTerm(true)
    bol.Location = currentLocation(c)
    return bol, nil
} / "false" {
    bol := BooleanTerm(false)
    bol.Location = currentLocation(c)
    return bol, nil
}

Null <- "null" {
    null := NullTerm()
    null.Location = currentLocation(c)
    return null, nil
}

Reserved <- ("not" / "package" / "import" / "null" / "true" / "false")

Integer <- '0' / NonZeroDecimalDigit DecimalDigit*

Exponent <- 'e'i [+-]? DecimalDigit+

AsciiLetter <- [A-Za-z_]

EscapedChar <- [\x00-\x1f"\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- ["\\/bfnrt]

UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

DecimalDigit <- [0-9]

NonZeroDecimalDigit <- [1-9]

HexDigit <- [0-9a-f]

ws "whitespace" <- [ \t\r\n]+

_ "whitespace" <- ( [ \t\r\n] / Comment )*

Comment <- [ \t]* "#" [^\r\n]*

EOF <- !.
